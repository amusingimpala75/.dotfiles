#+PROPERTY: header-args:emacs-lisp :tangle yes

* My Emacs Configuration

Lexical Bindings, and ensure we can use :bind:
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
(require 'bind-key)
(require 'nix-settings)
(add-to-list 'exec-path "~/.nix-profile/bin")
#+end_src

** UI

I really don't want the scroll bar or the tool bar, nor is the startup screen necessary
#+begin_src emacs-lisp
(use-package scroll-bar
  :custom (scroll-bar-mode nil)) ;;  Also see the section regarding frame defaults
(use-package tool-bar
  :custom (tool-bar-mode nil))
(setq initial-buffer-choice t)
#+end_src

~which-key~ being integrated into core is great for discovery.

#+begin_src emacs-lisp
(use-package which-key
  :config (which-key-mode))
#+end_src

I also like a transparent background (still waiting on alpha-background on mac)
#+begin_src emacs-lisp
(defvar my/alpha-setting (if (eq system-type 'darwin)
			      `(alpha . ,(+ my/opacity 10))
			    `(alpha-backgorund . ,(- my/opacity 10))))
(use-package frame
  :custom
  (default-frame-alist `(,my/alpha-setting
                         (ns-transparent-titlebar . t)
			 (vertical-scroll-bars . nil)
			 (horizontal-scroll-bars . nil))))
#+end_src
*** Theme
I use base16-based themes in Nix, which is automatically generated from user preferences
#+begin_src emacs-lisp
(use-package my-base16-theme
  :demand
  :custom (base16-theme-256-color-source 'colors)
  :config
  (load-theme 'my-base16 t))
#+end_src

*** Font
Pull from the user configuration for the font family/size
#+begin_src emacs-lisp
(use-package cus-face
  :custom-face
  (default ((t (:family ,my/font-family-fixed-pitch :height ,(* my/font-size 10)))))
  (variable-pitch ((t (:family ,my/font-family-variable-pitch))))
  (fixed-pitch ((t (:family ,my/font-family-fixed-pitch)))))
#+end_src

I also like to make it easy to modify the font size, bound to `C--` and `C-=`
#+begin_src emacs-lisp
(use-package face-remap
  :bind
  ("C--" . text-scale-decrease)
  ("C-=" . text-scale-increase))
#+end_src

** Org Mode
#+begin_src emacs-lisp
(use-package org
  :hook
   (org-mode . variable-pitch-mode)
   (org-mode . visual-line-mode)
  :custom-face
  (org-block ((t (:inherit fixed-pitch))))
  (org-table ((t (:inherit fixed-pitch))))
  (org-code ((t (:inherit (shadow fixed-pitch)))))
  (org-level-1 ((t (:weight bold :height 1.5))))
  (org-level-2 ((t (:weight bold :height 1.4))))
  (org-level-3 ((t (:weight bold :height 1.3))))
  (org-level-4 ((t (:weight bold :height 1.2))))
  (org-level-5 ((t (:weight bold :height 1.1))))
  (org-level-6 ((t (:weight bold))))
  (org-level-7 ((t (:weight bold))))
  (org-level-8 ((t (:weight bold))))
  :custom
  (org-src-fontify-natively t)
  (org-src-preserve-indentation t)
  :config
  (add-to-list 'org-modules 'org-tempo))
#+end_src

** Language Support
Since this is an emacs configuration after all, we use nix-mode
#+begin_src emacs-lisp
(use-package nix-mode
  :ensure t
  :after eglot
  :hook
  (nix-mode . eglot-ensure)
  (nix-mode . (lambda () (add-hook 'before-save-hook 'nix-mode-format nil t)))
  :config
  (add-to-list 'eglot-server-programs '(nix-mode . ("nixd"))))
#+end_src

\LaTeX is a necessary component for document editing
#+begin_src emacs-lisp

(defun my/add-bin-folder (path)
  (add-to-list 'exec-path path)
  (setenv "PATH" (concat (getenv "PATH") ":" path)))

(use-package tex
  :ensure auctex
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-master t)
  (reftex-plug-into-AUCTeX t)
  (TeX-save-query nil)
  :hook
  (LaTeX-mode . visual-line-mode)
  (LaTeX-mode . flyspell-mode)
  (LaTeX-mode . LaTeX-math-mode)
  (LaTeX-mode . turn-on-reftex)
  :init
  (defun my/add-latex-preview-save-hook ()
    (add-hook 'after-save-hook 'preview-buffer nil t))
  (add-hook 'LaTeX-mode-hook 'my/add-latex-preview-save-hook)
  (my/add-bin-folder my/texlive-bin)
  (my/add-bin-folder my/ghostscript-bin))

;; TODO hook when \) to do preview-at-point a few chars back
(use-package preview
  :hook (LaTeX-mode . LaTeX-preview-setup)
  :custom
  (preview-scale 1.4)
  (preview-auto-cache-preamble nil)
  :config
  (defun my/text-scale-adjust-latex-previews ()
    (dolist (ov (overlays-in (point-min) (point-max)))
      (if (eq (overlay-get ov 'category)
	      'preview-overlay)
	  (my/text-scale--resize-fragment ov))))
  (defun my/text-scale--resize-fragment (ov)
    (overlay-put ov 'display (cons 'image
				   (plist-put
				    (cdr (overlay-get ov 'display))
				    :scale (+ 1.0 (* 0.5 text-scale-mode-amount))))))
  (add-hook 'LaTeX-mode-hook (lambda ()
			       (add-hook 'text-scale-mode-hook #'my/text-scale-adjust-latex-previews))))

(use-package preview-dvisvgm
  :after preview
  :ensure t
  :custom
  (preview-image-type 'dvisvgm))

(use-package latex-preview-pane
  :ensure t
  :hook (LaTeX-mode . latex-preview-pane-mode))

#+end_src
** Completion

Vertico, Marginalia, Consult, and Orderless for the minibuffer completion system
# TODO: embark
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :custom (vertico-cycle t)
  :config (vertico-mode))

(use-package vertico-posframe
  :ensure t
  :after vertico
  :config (vertico-posframe-mode))

(use-package marginalia
  :ensure t
  :config (marginalia-mode))

(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))

(use-package savehist
  :config (savehist-mode))

(use-package consult
  :ensure t)
#+end_src

Corfu and completion preview for in-buffer completion, with kind-icon for svgs.
#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  :bind ( :map corfu-mode-map
	  ("S-<tab>" . completion-at-point)
	  ("<backtab>" . completion-at-point))
  :custom
  (corfu-cycle t)
  (corfu-popupinfo-delay '(0.5 . 0.5))
  :hook
  (prog-mode . corfu-mode)
  (corfu-mode . corfu-popupinfo-mode))

(use-package completion-preview
  :hook (corfu-mode . completion-preview-mode)
  :custom (completion-preview-minimum-symbol-length 2))

(use-package kind-icon
  :ensure t
  :after corfu
  :config (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
** Miscellaneous
Remove the annoying files Emacs dumps all over the system
#+begin_src emacs-lisp
(use-package files
  :custom
  (backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))
  (create-lockfiles nil))
#+end_src
