#+PROPERTY: header-args:emacs-lisp :tangle yes

* My Emacs Configuration

Lexical Bindings, and ensure we can use :bind:
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
(require 'bind-key)
(require 'nix-settings)
(add-to-list 'exec-path "~/.nix-profile/bin")
#+end_src

** UI
I really don't want the scroll bar or the tool bar, nor is the startup screen necessary; additionally the menu bar is only really fine on macOS where it is separate from the window, and hidden most of the time.
#+begin_src emacs-lisp
(use-package scroll-bar
  :custom (scroll-bar-mode nil)) ;;  Also see the section regarding frame defaults
(use-package tool-bar
  :custom (tool-bar-mode nil))

(setq initial-buffer-choice t)

(use-package emacs
  :config
  (unless (and (eq 'system-type 'darwin) (display-graphic-p))
    (menu-bar-mode -1)))
#+end_src

Line numbers are a must for programming, especially relative numbers for jumping quickly
#+begin_src emacs-lisp
(use-package display-line-numbers
  :custom (display-line-numbers-type 'relative)
  :hook (prog-mode . display-line-numbers-mode))
#+end_src

~which-key~ being integrated into core is great for discovery.
#+begin_src emacs-lisp
(use-package which-key
  :custom (which-key-mode t))
#+end_src

The normal bell noise is just awful, this replaces it with the visual bell.
#+begin_src emacs-lisp
(use-package emacs
  :custom (visible-bell 1))
#+end_src

*** Scrolling
The frame really needs to scroll better.
#+begin_src emacs-lisp
(use-package emacs
  :custom
  ;(scroll-margin 2)
  (scroll-conservatively 101))
#+end_src

Additionally, truncate text off the edge of the screen unless in a text mode
#+begin_src emacs-lisp
(use-package emacs
  :custom (truncate-lines t))
(use-package text-mode
  :hook (text-mode . visual-line-mode))
#+end_src

*** Theme
I use base16-based themes in Nix, which is automatically generated from user preferences
#+begin_src emacs-lisp
(use-package my-base16-theme
  :demand
  :custom (base16-theme-256-color-source 'colors)
  :config
  (load-theme 'my-base16 t))
#+end_src

I also like a transparent background (still waiting on alpha-background on mac)
#+begin_src emacs-lisp
;; Update if macOS ever supports alpha-background
(defvar my/alpha-setting (if (string-match-p "PGTK" system-configuration-features)
                             `(alpha-background . ,(- my/opacity 5))
                           `(alpha . ,(+ my/opacity 5))))
(use-package frame
  :custom
  (default-frame-alist `(,my/alpha-setting
                         (ns-transparent-titlebar . t)
			 (vertical-scroll-bars . nil)
			 (horizontal-scroll-bars . nil))))
#+end_src

*** Font
Pull from the user configuration for the font family/size
#+begin_src emacs-lisp
(use-package cus-face
  :custom-face
  (default ((t (:family ,my/font-family-fixed-pitch :height ,(* my/font-size 10)))))
  (variable-pitch ((t (:family ,my/font-family-variable-pitch))))
  (fixed-pitch ((t (:family ,my/font-family-fixed-pitch)))))
#+end_src

I also like to make it easy to modify the font size, bound to `C--` and `C-=`
#+begin_src emacs-lisp
(use-package face-remap
  :bind
  ("C--" . text-scale-decrease)
  ("C-=" . text-scale-increase))
#+end_src

#+begin_src emacs-lisp
(use-package ligature
  :ensure t
  :config
  (ligature-set-ligatures 'prog-mode '("==" "!=" ">=" "<=" "->" "=>" ".." "..." "++" "+=" "::=" "__"))
  (global-ligature-mode t))
#+end_src

** Org Mode
#+begin_src emacs-lisp
(use-package org
  :hook
   (org-mode . variable-pitch-mode)
   (org-mode . visual-line-mode)
  :custom-face
  (org-block ((t (:inherit fixed-pitch))))
  (org-table ((t (:inherit fixed-pitch))))
  (org-code ((t (:inherit (shadow fixed-pitch)))))
  (org-level-1 ((t (:weight bold :height 1.5))))
  (org-level-2 ((t (:weight bold :height 1.4))))
  (org-level-3 ((t (:weight bold :height 1.3))))
  (org-level-4 ((t (:weight bold :height 1.2))))
  (org-level-5 ((t (:weight bold :height 1.1))))
  (org-level-6 ((t (:weight bold))))
  (org-level-7 ((t (:weight bold))))
  (org-level-8 ((t (:weight bold))))
  :custom
  (org-src-fontify-natively t)
  (org-src-preserve-indentation t)
  :config
  (add-to-list 'org-modules 'org-tempo))
#+end_src

Org-modern just makes things look nicer
#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  :hook (org-mode . org-modern-mode))
#+end_src

** Language Support
*** Markdown
While many READMEs are in Markdown, this is actually here so that Eldoc (and thus corfu-popupinfo) renders docstrings correctly
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md'\\" . gfm-mode))
#+end_src

*** Nix
Since this is an emacs configuration after all, we use nix-mode
#+begin_src emacs-lisp
(use-package nix-mode
  :ensure t
  :after eglot
  :hook
  (nix-mode . eglot-ensure)
  (nix-mode . (lambda () (add-hook 'before-save-hook 'nix-mode-format nil t)))
  :config
  (add-to-list 'eglot-server-programs '(nix-mode . ("nixd"))))
#+end_src

*** \LaTeX
\LaTeX is a necessary component for document editing
#+begin_src emacs-lisp

(defun my/add-bin-folder (path)
  (add-to-list 'exec-path path)
  (setenv "PATH" (concat (getenv "PATH") ":" path)))

(use-package tex
  :ensure auctex
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-master t)
  (reftex-plug-into-AUCTeX t)
  (TeX-save-query nil)
  :hook
  (LaTeX-mode . visual-line-mode)
  (LaTeX-mode . flyspell-mode)
  (LaTeX-mode . LaTeX-math-mode)
  (LaTeX-mode . turn-on-reftex)
  :init
  (defun my/add-latex-preview-save-hook ()
    (add-hook 'after-save-hook 'preview-buffer nil t))
  (add-hook 'LaTeX-mode-hook 'my/add-latex-preview-save-hook)
  (my/add-bin-folder my/texlive-bin)
  (my/add-bin-folder my/ghostscript-bin))

;; TODO hook when \) to do preview-at-point a few chars back
(use-package preview
  :hook (LaTeX-mode . LaTeX-preview-setup)
  :custom
  (preview-scale 1.4)
  (preview-auto-cache-preamble nil)
  :config
  (defun my/text-scale-adjust-latex-previews ()
    (dolist (ov (overlays-in (point-min) (point-max)))
      (if (eq (overlay-get ov 'category)
	      'preview-overlay)
	  (my/text-scale--resize-fragment ov))))
  (defun my/text-scale--resize-fragment (ov)
    (overlay-put ov 'display (cons 'image
				   (plist-put
				    (cdr (overlay-get ov 'display))
				    :scale (+ 1.0 (* 0.5 text-scale-mode-amount))))))
  (add-hook 'LaTeX-mode-hook (lambda ()
			       (add-hook 'text-scale-mode-hook #'my/text-scale-adjust-latex-previews))))

(use-package preview-dvisvgm
  :after preview
  :ensure t
  :custom
  (preview-image-type 'dvisvgm))

(use-package latex-preview-pane
  :ensure t
  :hook (LaTeX-mode . latex-preview-pane-mode))

#+end_src

*** Java
Configure java to use jdtls/eglot
# TODO make this a (use-package java-mode ...) or (use-package cc-mode ...). I cannot for the life of me get those to work.
#+begin_src emacs-lisp
(my/add-bin-folder my/jdtls-bin)
(use-package eglot
  :hook (java-mode . eglot-ensure))
#+end_src

*** Rust
#+begin_src emacs-lisp
(my/add-bin-folder my/rust-analyzer-bin)
(my/add-bin-folder my/rustfmt-bin)
(my/add-bin-folder my/cargo-bin)
(my/add-bin-folder my/rustc-bin)

(use-package rust-mode
  :after treesit
  :ensure t
  :hook (rust-ts-mode . eglot-ensure)
  :custom
  (rust-mode-treesitter-derive t)
  (rust-format-on-save t)
  :init
  (add-to-list 'treesit-extra-load-path my/treesitter-rust))
#+end_src

*** Lua
#+begin_src emacs-lisp
(my/add-bin-folder my/lua-language-server-bin)
(use-package lua-mode
  :ensure t
  :hook (lua-mode . eglot-ensure))
#+end_src

*** Zig
#+begin_src emacs-lisp
(my/add-bin-folder my/zls-bin)
(use-package zig-mode
  :ensure t
  :hook (zig-mode . eglot-ensure))
#+end_src

*** C
#+begin_src emacs-lisp
(my/add-bin-folder my/clang-bin) ; for clangd
; For whatever reason, putting this in the use-package block doesn't immediately run
; this when .c files are loaded, just when M-x c-ts-mode is executed
(add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
(use-package cc-mode
  :after treesit
  :hook (c-ts-mode . eglot-ensure)
  :custom
  (c-ts-mode-indent-offset 4)
  :init
  (add-to-list 'treesit-extra-load-path my/treesitter-c)
  (add-to-list 'treesit-extra-load-path my/treesitter-cpp))
#+end_src

*** Python
#+begin_src emacs-lisp
(my/add-bin-folder my/python-lsp-server-bin)
(add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
(use-package python
  :after treesit
  :hook (python-ts-mode  . eglot-ensure)
  :init
  (add-to-list 'treesit-extra-load-path my/treesitter-python))
#+end_src

*** JavaScript
#+begin_src emacs-lisp
(my/add-bin-folder my/typescript-language-server-bin)
(add-to-list 'major-mode-remap-alist '(javascript-mode . js-ts-mode))
(use-package js
  :after treesit
  :hook (js-ts-mode . eglot-ensure)
  :init
  (add-to-list 'treesit-extra-load-path my/treesitter-javascript))
#+end_src

** Completion
Vertico, Marginalia, Consult, and Orderless for the minibuffer completion system
# TODO: embark
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :custom (vertico-cycle t)
  :config (vertico-mode))

(use-package vertico-posframe
  :ensure t
  :after vertico
  :config (vertico-posframe-mode))

(use-package marginalia
  :ensure t
  :config (marginalia-mode))

(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))

(use-package savehist
  :config (savehist-mode))

(use-package consult
  :ensure t)
#+end_src

Corfu and completion preview for in-buffer completion, with kind-icon for svgs.
#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  :bind ( :map corfu-mode-map
	  ("S-<tab>" . completion-at-point)
	  ("<backtab>" . completion-at-point))
  :custom
  (corfu-cycle t)
  (corfu-popupinfo-delay '(0.5 . 0.5))
  :hook
  (prog-mode . corfu-mode)
  (corfu-mode . corfu-popupinfo-mode))

(use-package corfu-terminal
  :ensure t
  :init
  (unless (display-graphic-p)
    (corfu-terminal-mode +1)))

(use-package completion-preview
  :hook (corfu-mode . completion-preview-mode)
  :custom (completion-preview-minimum-symbol-length 2))

(use-package kind-icon
  :ensure t
  :after corfu
  :config (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

Auto-completion of matching parenthesis is really useful, although it can get in the way sometimes (ie. TODO fix this or not in all prog-modes)
#+begin_src emacs-lisp
(use-package electric-pair
  :hook (prog-mode . electric-pair-mode))
#+end_src

Snippets with yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :custom
  (yas-snippet-dirs (list my/snippets-dir))
  :config
  (yas-global-mode 1))
#+end_src

** Apps
Eradio allows listening to internet radio in Emacs.
# TODO broken?
#+begin_src emacs-lisp
(use-package eradio
  :ensure t
  :custom
  (eradio-channels '(("KBach" . "https://kbaq.streamguys1.com/kbaq_mp3_128")))
  (eradio-player `(,my/vlc "--no-video" "-I" "rc")))
#+end_src

** Miscellaneous
Remove the annoying files Emacs dumps all over the system.
Also, I've been burned one too many times by accidentally opening a massive file with =font-lock=
#+begin_src emacs-lisp
(defun my/find-file-massive-basic ()
  "If a file is large, remove features to not freeze."
  (when (> (buffer-size) (* 256 1024))
    (setq buffer-read-only t)
    (buffer-disable-undo)
    (fundamental-mode)))
(use-package files
  :hook (find-file . my/find-file-massive-basic)
  :custom
  (backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))
  (create-lockfiles nil))
#+end_src

Visual Undo to visualize the undo tree
#+begin_src emacs-lisp
(use-package vundo
  :ensure t)
#+end_src

Always use utf-8 when possible
#+begin_src emacs-lisp
(use-package emacs
  :config
  (set-default-coding-systems 'utf-8))
#+end_src

Never use tabs; always spaces
#+begin_src emacs-lisp
(use-package simple
  :custom (indent-tabs-mode nil))
#+end_src

#+begin_src emacs-lisp
(use-package indent-bars
  :ensure t
  :hook (prog-mode . indent-bars-mode)
  :custom
  (indent-bars-prefer-character t)
  (indent-bars-ts-support t)
  (indent-bars-color '(highlight :blend 0.6))
  (indent-bars-highlight-current-depth '(:face default :blend 1.0))
  (indent-bars-treesitter-scope '((python function_definition class_definition for_statement if_statement with_statement while_statement))))
#+end_src

# TODO: eat, treesit-utils, go/other prog modes, custom modeline, ibuffer/dired sidebars, flymake, dape, magit/forge, hideshow, all-the-icons (or alt.), golden-ratio, dimmer
