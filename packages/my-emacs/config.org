#+PROPERTY: header-args:emacs-lisp :tangle yes

* My Emacs Configuration

Lexical Bindings, and ensure we can use :bind:
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
(require 'bind-key)
(require 'nix-settings)
(add-to-list 'exec-path "~/.nix-profile/bin")
#+end_src

** UI
I really don't want the scroll bar or the tool bar, nor is the startup screen necessary; additionally the menu bar is only really fine on macOS where it is separate from the window, and hidden most of the time.
#+begin_src emacs-lisp
(use-package scroll-bar
  :custom (scroll-bar-mode nil)) ;;  Also see the section regarding frame defaults
(use-package tool-bar
  :custom (tool-bar-mode nil))

(setq initial-buffer-choice t)

(use-package emacs
  :config
  (unless (and (eq 'system-type 'darwin) (display-graphic-p))
    (menu-bar-mode -1)))
#+end_src

Line numbers are a must for programming, especially relative numbers for jumping quickly
#+begin_src emacs-lisp
(use-package display-line-numbers
  :custom (display-line-numbers-type 'relative)
  :hook (prog-mode . display-line-numbers-mode))
#+end_src

Show a line at 80 chars (this helps code format) and show the dimensions of boundaries.
#+begin_src emacs-lisp
(use-package emacs
  :custom
  (fill-column 80)
  (indicate-buffer-boundaries 'left)
  :hook
  (prog-mode . display-fill-column-indicator-mode))
#+end_src

In order to declutter the bottom, I need diminish
#+begin_src emacs-lisp
(use-package diminish
  :ensure t)
#+end_src

~which-key~ being integrated into core is great for discovery.
#+begin_src emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :custom (which-key-mode t))
#+end_src

The normal bell noise is just awful, this replaces it with the visual bell.
#+begin_src emacs-lisp
(use-package emacs
  :custom (visible-bell 1))
#+end_src

I like to be able to visualize colors in the editor, but I probably don't want it on always
#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t)
#+end_src

Breadcrumbs to show where I am
#+begin_src emacs-lisp
(use-package breadcrumb
  :ensure t
  :custom (breadcrumb-mode t))
#+end_src

*** Scrolling
The frame really needs to scroll better.
#+begin_src emacs-lisp
(use-package emacs
  :custom
  ;(scroll-margin 2)
  (scroll-conservatively 101)
  (pixel-scroll-precision-mode t))
#+end_src

Additionally, truncate text off the edge of the screen unless in a text mode
#+begin_src emacs-lisp
(use-package emacs
  :custom (truncate-lines t))
(use-package text-mode
  :diminish visual-line-mode
  :hook (text-mode . visual-line-mode))
#+end_src

*** Theme
I use base16-based themes in Nix, which is automatically generated from user preferences
#+begin_src emacs-lisp
;; Snippet moved into nix-settings.el as part of the system config
#+end_src

I also like a transparent background (still waiting on alpha-background on mac)
#+begin_src emacs-lisp
;; Update if macOS ever supports alpha-background
(defvar my/alpha-setting (if (string-match-p "PGTK" system-configuration-features)
                             `(alpha-background . ,(max 0 (- my/opacity 5)))
                           `(alpha . ,(min 100 (+ my/opacity 5)))))
(use-package frame
  :bind
  ("C-z" . nil)
  :custom
  (default-frame-alist `(,my/alpha-setting
                         (ns-transparent-titlebar . t)
			 (vertical-scroll-bars . nil)
			 (horizontal-scroll-bars . nil))))
#+end_src

*** Font
Pull from the user configuration for the font family/size
#+begin_src emacs-lisp
(use-package cus-face
  :custom-face
  (default ((t (:family ,my/font-family-fixed-pitch :height ,(* my/font-size 10)))))
  (variable-pitch ((t (:family ,my/font-family-variable-pitch))))
  (fixed-pitch ((t (:family ,my/font-family-fixed-pitch))))
  :config
  ;; I wish I could just do it for the single character required ¯\_(ツ)_/¯
  ;; But org-export or nix or something is not happy (unrecognized token)
  (unless (eq 'system-type 'darwin)
    (set-fontset-font t nil "Noto Sans CJK" nil 'append)))
#+end_src

I also like to make it easy to modify the font size, bound to `C--` and `C-=`
#+begin_src emacs-lisp
(use-package face-remap
  :bind
  ("C--" . text-scale-decrease)
  ("C-=" . text-scale-increase))
#+end_src

#+begin_src emacs-lisp
(use-package ligature
  :ensure t
  :custom
  (global-ligature-mode t)
  :config
  (ligature-set-ligatures 'prog-mode '("==" "!=" ">=" "<=" "->" "=>"
                                       ".." "..." "++" "+=" "::=" "__"
                                       "===" "!==")))
#+end_src

*** Dashboard
Use the dashboard for a nice splash screen
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :custom
  (initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))
  (dashboard-center-content t)
  :config
  (dashboard-setup-startup-hook))
#+end_src

Use the biblegateway VotD for the footer
#+begin_src emacs-lisp
(use-package bible-gateway
  :ensure t
  :after dashboard
  :custom
  (dashboard-footer-messages (list (bible-gateway-get-verse))))
#+end_src

** Language Support (modes)
*** ~fundamental-mode~ (global)
**** Snippets
***** Indent snippet
#+begin_src emacs-lisp
(defun my/skeleton-indent-afterwards ()
  (indent-region (car (last skeleton-positions)) (car skeleton-positions)))
#+end_src

***** Insert current file name
#+begin_src emacs-lisp
(define-skeleton fundamental-skeleton-current-file
  "Insert the name of the current file"
  nil ;; no prompt
  > (file-name-nondirectory (buffer-file-name)))
#+END_src

***** Insert current date
#+begin_src emacs-lisp
(define-skeleton fundamental-skeleton-current-date
  "Insert the date"
  nil ;; no prompt
  > (format-time-string "%Y-%m-%d"))
#+end_src

***** Fancy heading
#+begin_src emacs-lisp
(defun my/longest-line (str)
  "Return length of longest single line in `str'."
  (seq-max (mapcar 'string-width (split-string str "\n"))))

(define-skeleton fundamental-skeleton-heading
  "Generate surrounded heading"
  ""
  '(setq str (skeleton-read "Title: "))
  > (make-string (my/longest-line str) ?=) \n
  > str \n
  > (make-string (my/longest-line str) ?=))
#+end_src

**** Config
Actually add the snippets
#+begin_src emacs-lisp
(defun my/add-skeleton-abbrevs (table pairs)
  (dolist (pair pairs)
    (let ((name (car pair))
          (fn (cdr pair)))
      (define-abbrev table name "" fn 1))))

(defun my/add-fundamental-snippets (table)
  (define-abbrev table "shr" "¯\\_(ツ)_/¯" nil 1)
  (my/add-skeleton-abbrevs table '(("here" . fundamental-skeleton-current-file)
                                   ("now" . fundamental-skeleton-current-date)
                                   ("heading" . fundamental-skeleton-heading))))
#+end_src

*** Markdown
While many READMEs are in Markdown, this is actually here so that Eldoc (and thus corfu-popupinfo) renders docstrings correctly
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :config
  (my/add-fundamental-snippets markdown-mode-abbrev-table))
#+end_src

*** Nix
Since this is an emacs configuration after all, we use nix-mode
#+begin_src emacs-lisp
(use-package nix-mode
  :ensure t
  :hook
  (nix-mode . eglot-ensure)
  (nix-mode . (lambda () (add-hook 'before-save-hook 'nix-format-buffer nil t)))
  :config
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs '(nix-mode . ("nixd"))))
  (my/add-fundamental-snippets nix-mode-abbrev-table))
#+end_src

*** \LaTeX
\LaTeX is a necessary component for document editing
**** Snippets
#+begin_src emacs-lisp
(defun my/add-LaTeX-snippets (table)
  (my/add-fundamental-snippets table)
  (define-abbrev table "ria" "\\rightarrow" nil 1))
#+end_src

**** config
#+begin_src emacs-lisp
;; I don't like this hackiness, but latex/auctex/tex loading is weird
(use-package tex
  :ensure auctex
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-master t)
  (reftex-plug-into-AUCTeX t)
  (TeX-save-query nil)
  :hook
  (LaTeX-mode . visual-line-mode)
  (LaTeX-mode . flyspell-mode)
  (LaTeX-mode . LaTeX-math-mode)
  (LaTeX-mode . turn-on-reftex)
  :init
  (defun my/add-latex-preview-save-hook ()
    (add-hook 'after-save-hook 'preview-buffer nil t))
  (add-hook 'LaTeX-mode-hook 'my/add-latex-preview-save-hook)
  :config
  (my/add-LaTeX-snippets LaTeX-mode-abbrev-table))

;; TODO hook when \) to do preview-at-point a few chars back
(use-package preview
  :hook (LaTeX-mode . LaTeX-preview-setup)
  :custom
  (preview-scale 1.4)
  (preview-auto-cache-preamble nil)
  :config
  (defun my/text-scale-adjust-latex-previews ()
    (dolist (ov (overlays-in (point-min) (point-max)))
      (if (eq (overlay-get ov 'category)
	      'preview-overlay)
	  (my/text-scale--resize-fragment ov))))
  (defun my/text-scale--resize-fragment (ov)
    (overlay-put ov 'display (cons 'image
				   (plist-put
				    (cdr (overlay-get ov 'display))
				    :scale (+ 1.0 (* 0.5 text-scale-mode-amount))))))
  (add-hook 'LaTeX-mode-hook (lambda ()
			       (add-hook 'text-scale-mode-hook #'my/text-scale-adjust-latex-previews))))

(use-package preview-dvisvgm
  :after preview
  :ensure t
  :custom
  (preview-image-type 'dvisvgm))

(use-package latex-preview-pane
  :ensure t
  :hook (LaTeX-mode . latex-preview-pane-mode))
#+end_src

*** Org Mode
#+begin_src emacs-lisp
(use-package org
  :defer 5
  :hook
   (org-mode . variable-pitch-mode)
   (org-mode . visual-line-mode)
  :custom-face
  (org-block ((t (:inherit fixed-pitch))))
  (org-table ((t (:inherit fixed-pitch))))
  (org-code ((t (:inherit (shadow fixed-pitch)))))
  (org-level-1 ((t (:weight bold :height 1.5))))
  (org-level-2 ((t (:weight bold :height 1.4))))
  (org-level-3 ((t (:weight bold :height 1.3))))
  (org-level-4 ((t (:weight bold :height 1.2))))
  (org-level-5 ((t (:weight bold :height 1.1))))
  (org-level-6 ((t (:weight bold))))
  (org-level-7 ((t (:weight bold))))
  (org-level-8 ((t (:weight bold))))
  :custom
  (org-src-fontify-natively t)
  (org-src-preserve-indentation t)
  :config
  (add-to-list 'org-modules 'org-tempo)
  (my/add-LaTeX-snippets org-mode-abbrev-table))
#+end_src

Org-modern just makes things look nicer
#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  :hook (org-mode . org-modern-mode))
#+end_src

#+begin_src emacs-lisp
(use-package org-present
  :ensure t)
#+end_src
*** Java
Configure java to use jdtls/eglot
# TODO make this a (use-package java-mode ...) or (use-package cc-mode ...). I cannot for the life of me get those to work.
**** Snippets
***** Main class generator
#+begin_src emacs-lisp
(define-skeleton java-skeleton-def-main
  "Generate java main class/function."
  ""
  @
  "public class " (capitalize (file-name-nondirectory (file-name-sans-extension (buffer-name)))) " {" \n
  "public static void main(String[] args) {" \n
  _ \n
  "}" \n
  "}"
  @
  '(my/skeleton-indent-afterwards))
#+end_src

produces:

#+begin_src java
public class [Class name from file name] {
    public static void main(String[] args) {
        <cursor here>
    }
}
#+end_src

***** println generator
#+begin_src emacs-lisp
(define-skeleton java-skeleton-println
  "Generate println statement."
  ""
  > "System.out.println(" (skeleton-read "text: ") ");" \n
  > _)
#+end_src

**** Config
#+begin_src emacs-lisp
(defun my/add-java-snippets (table)
  (my/add-fundamental-snippets table)
  (my/add-skeleton-abbrevs table '(("defmain" . java-skeleton-def-main)
                                   ("pr" . java-skeleton-println))))
(with-eval-after-load 'cc-mode
  (add-hook 'java-mode-hook 'eglot-ensure)
  (my/add-java-snippets java-mode-abbrev-table))

(use-package java-ts-mode
  :after treesit
  :hook (java-ts-mode . eglot-ensure)
  :config
  (my/add-java-snippets java-ts-mode-abbrev-table))
#+end_src

*** Rust
#+begin_src emacs-lisp
(use-package rust-mode
  :after treesit
  :ensure t
  :hook (rust-ts-mode . eglot-ensure)
  :custom
  (rust-mode-treesitter-derive t)
  (rust-format-on-save t)
  :config
  (my/add-fundamental-snippets rust-mode-abbrev-table)
  (my/add-fundamental-snippets rust-ts-mode-abbrev-table))
#+end_src

*** Lua
#+begin_src emacs-lisp
(use-package lua-mode
  :ensure t
  :hook (lua-mode . eglot-ensure)
  :config
  (my/add-fundamental-snippets lua-mode-abbrev-table))
#+end_src

*** Zig
#+begin_src emacs-lisp
(use-package zig-mode
  :ensure t
  :diminish zig-format-on-save-mode
  :hook (zig-mode . eglot-ensure)
  :config
  (my/add-fundamental-snippets zig-mode-abbrev-table))
#+end_src

*** C
**** Snippets
***** Header Guard
(yes I know ~#pragma once~ exists)
#+begin_src emacs-lisp
(defun my/default-header-guard-name ()
  "Default header guard created by upcase the file name."
  (concat (upcase (file-name-nondirectory (file-name-sans-extension (buffer-file-name)))) "_H"))

(define-skeleton c-skeleton-guard
  "Generate header guard"
  ""
  '(setq str (skeleton-read "Header: " (my/default-header-guard-name)))
  "#ifndef " str \n
  "#define " str \n
  \n
  _ \n
  \n
  "#endif /* " str " */")
#+end_src

produces

#+begin_src c
#ifndef CONFIG_H
#define CONFIG_H

<cursor here>

#endif /* CONFIG_H */
#+end_src

***** Doxygen Header comment
#+begin_src emacs-lisp
(define-skeleton c-skeleton-doxy-header
  "Doxygen comment for header."
  ""
  @
  "/**" \n
  " * @file " (file-name-nondirectory (buffer-file-name)) \n
  " * @author " (skeleton-read "Author: " nil nil) \n ;; TODO default author
  " * @brief " (skeleton-read "Brief: " nil nil) \n
  " * @date " (format-time-string "%Y-%m-%d") \n
  " */"
  @
  '(my/skeleton-indent-afterwards))
#+end_src

***** Doxygen function comment
#+begin_src emacs-lisp
(define-skeleton c-skeleton-doxy-fn
  "Doxygen comment for a function."
  ""
  @
  "/**" \n
  " * @brief " (skeleton-read "Brief: ") \n
  " *" \n
  " * " (skeleton-read "Description: ") \n
  " *" \n
  ("Param: " " * @param " str \n)
  " * @return " (skeleton-read "Returns: ") \n
  " */"
  @
  '(my/skeleton-indent-afterwards))
#+end_src

**** Config
#+begin_src emacs-lisp
(defun my/add-c-snippets (table)
  (my/add-fundamental-snippets table)
  (my/add-skeleton-abbrevs table '(("guard" . c-skeleton-guard)
                                   ("doxyheader" . c-skeleton-doxy-header)
                                   ("doxyfn" . c-skeleton-doxy-fn))))

;; For whatever reason, putting this in the use-package block doesn't immediately run
;; this when .c files are loaded, just when M-x c-ts-mode is executed
(add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
(use-package cc-mode
  :config
  (my/add-c-snippets c-mode-abbrev-table))

(use-package c-ts-mode
  :after treesit
  :hook (c-ts-mode . eglot-ensure)
  :custom
  (c-ts-mode-indent-offset 4)
  :config
  (my/add-c-snippets c-ts-mode-abbrev-table))
#+end_src

*** Python
**** Snippets
***** Doc comment for functions
#+begin_src emacs-lisp
(define-skeleton python-skeleton-doc-func
  "Generate doc comment for function."
  ""
  "\"\"\"" (skeleton-read "Brief: ") \n
  \n
  (skeleton-read "Long: ") \n
  \n
  "Args:" \n
  ("Arg: " "    " str \n)
  \n
  "Returns:" \n
  "    " (skeleton-read "Returns: ") \n
  \n
  "Raises:" \n
  ("Exception: " "    " str \n)
  "\"\"\"")
#+end_src

***** Main function generator
#+begin_src emacs-lisp
(define-skeleton python-skeleton-main-fn
  "Generate main-func paradigm."
  ""
  "def main():" \n
  > _ \n
  > "pass" \n
  \n
  "if __name__ == '__main__':" \n
  > "main()")
#+end_src

**** Config
#+begin_src emacs-lisp
(defun my/add-python-snippets (table)
  (my/add-fundamental-snippets table)
  (my/add-skeleton-abbrevs table '(("dfunc" . python-skeleton-doc-func)
                                   ("mainf" . python-skeleton-main-fn))))

(add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
(use-package python
  :after treesit
  :hook (python-ts-mode  . eglot-ensure)
  :config
  (my/add-python-snippets python-mode-abbrev-table)
  (my/add-python-snippets python-ts-mode-abbrev-table))
#+end_src

*** JavaScript
#+begin_src emacs-lisp
(add-to-list 'major-mode-remap-alist '(javascript-mode . js-ts-mode))
(use-package js
  :after treesit
  :hook (js-ts-mode . eglot-ensure)
  :config
  (my/add-fundamental-snippets js-mode-abbrev-table)
  (my/add-fundamental-snippets js-ts-mode-abbrev-table))
#+end_src

*** Fennel
#+begin_src emacs-lisp
(use-package fennel-mode
  :ensure t
  :mode ("\\.fnl\\'" . fennel-mode)
  :hook (fennel-mode . eglot-ensure)
  :config
  (my/add-fundamental-snippets fennel-mode-abbrev-table))
#+end_src

*** Justfile
#+begin_src emacs-lisp
(use-package just-ts-mode
  :ensure t)
#+end_src

*** Go
#+begin_src emacs-lisp
(use-package go-ts-mode
  :defer 1
  :hook (go-ts-mode . eglot-ensure))
#+end_src

*** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :ensure t
  :hook (haskell-mode . eglot-ensure))
#+end_src

*** Swift
#+begin_src emacs-lisp
(use-package swift-mode
  :ensure t)
#+end_src

** Completion
Vertico, Marginalia, Consult, and Orderless for the minibuffer completion system
# TODO: embark
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :custom
  (vertico-cycle t)
  (vertico-mode t))

(use-package vertico-posframe
  :ensure t
  :after vertico
  :custom
  (vertico-posframe-mode 1))

(use-package marginalia
  :ensure t
  :custom
  (marginalia-mode 1))

(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))

(use-package savehist
  :custom
  (savehist-mode 1))

(use-package consult
  :ensure t)
#+end_src

Corfu and completion preview for in-buffer completion, with kind-icon for svgs.
#+begin_src emacs-lisp
(use-package cape
  :ensure t
  :after corfu
  :init
  (setq my/eglot-capf (cape-capf-super #'eglot-completion-at-point #'cape-abbrev)
        my/elisp-capf (cape-capf-super #'cape-abbrev #'cape-dabbrev #'elisp-completion-at-point)
        my/org-capf (cape-capf-super #'cape-abbrev #'cape-elisp-block)
        my/generic-capf (cape-capf-super #'cape-abbrev))

  (defun my/cape-capf-set ()
    (interactive)
    (setq-local completion-at-point-functions
                (list
                 (cond ((equal major-mode #'org-mode) my/org-capf)
                       ((or (equal major-mode #'emacs-lisp-mode)
                            (equal major-mode #'lisp-interaction-mode)) my/elisp-capf)
                       ((and (fboundp 'eglot-managed-p) (eglot-managed-p)) my/eglot-capf)
                       (t my/generic-capf)))))
  :hook (after-change-major-mode . my/cape-capf-set))

(use-package corfu
  :ensure t
  :bind ( :map corfu-mode-map
	  ("S-<tab>" . completion-at-point)
	  ("<backtab>" . completion-at-point))
  :custom
  (global-corfu-mode t)
  (corfu-cycle t)
  (corfu-popupinfo-delay '(0.5 . 0.5))
  :hook
  (prog-mode . corfu-mode)
  (corfu-mode . corfu-popupinfo-mode))

(use-package corfu-terminal
  :ensure t
  :init
  (unless (display-graphic-p)
    (corfu-terminal-mode +1)))

;; :TODO: fix suggestion in org mode at least not being anything other than a simple dict autocomplete (abbrev not showing?)
(use-package completion-preview
  :diminish completion-preview-mode
  :hook ((corfu-mode . completion-preview-mode)
         (org-mode . my/completion-preview-add-org))
  :custom (completion-preview-minimum-symbol-length 2)
  :init
  (defun my/completion-preview-add-org ()
    (setq-local completion-preview-commands
                (append completion-preview-commands '(org-self-insert-command org-delete-backward-char)))))

(use-package kind-icon
  :ensure t
  :after corfu
  :custom
  (corfu-margin-formatters (list #'kind-icon-margin-formatter)))
#+end_src

Auto-completion of matching parenthesis is really useful, although it can get in the way sometimes (ie. TODO fix this or not in all prog-modes)
#+begin_src emacs-lisp
(use-package electric-pair
  :hook (prog-mode . electric-pair-mode))
#+end_src

Avy to help with jumping around text
#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :bind (("M-j" . avy-goto-char-timer)))
#+end_src

eldoc for inline documentation
#+begin_src emacs-lisp
(use-package eldoc
  :diminish eldoc-mode)
(use-package eldoc-box
  :ensure t
  :bind (:map eglot-mode-map ("C-c C-e" . 'eldoc-box-help-at-point)))
#+end_src

** Apps
*** Eradio
Eradio allows listening to internet radio in Emacs.
# TODO broken?
#+begin_src emacs-lisp
(use-package eradio
  :ensure t
  :custom
  (eradio-channels '(("KBach" . "https://kbaq.streamguys1.com/kbaq_mp3_128"))))
#+end_src

*** Dired
#+begin_src emacs-lisp
(use-package vscode-icon
  :ensure t)

(use-package dired-sidebar
  :ensure t
  :after vscode-icon
  :bind ("C-x C-d" . dired-sidebar-toggle-sidebar)
  :hook (dired-sidebar-mode . (lambda ()
                                (unless (file-remote-p default-directory)
                                  (auto-revert-mode))))
  :custom
  (dired-sidebar-theme 'vscode))
#+end_src

** Miscellaneous
Remove the annoying files Emacs dumps all over the system.
Also, I've been burned one too many times by accidentally opening a massive file with =font-lock=
#+begin_src emacs-lisp
(defun my/find-file-massive-basic ()
  "If a file is large, remove features to not freeze."
  (when (> (buffer-size) (* 256 1024))
    (setq buffer-read-only t)
    (buffer-disable-undo)
    (fundamental-mode)))
(use-package files
  :hook (find-file . my/find-file-massive-basic)
  :custom
  (backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))
  (create-lockfiles nil)
  (save-abbrevs nil))
#+end_src

Visual Undo to visualize the undo tree
#+begin_src emacs-lisp
(use-package vundo
  :ensure t
  :bind ("C-?" . vundo))
#+end_src

Always use utf-8 when possible
#+begin_src emacs-lisp
(use-package emacs
  :config
  (set-default-coding-systems 'utf-8))
#+end_src

Never use tabs; always spaces. Also, always force DWIM if possible
#+begin_src emacs-lisp
(use-package simple
  :custom (indent-tabs-mode nil)
  :bind
  ("M-u" . upcase-dwim)
  ("M-l" . downcase-dwim)
  ("M-c" . capitalize-dwim))
#+end_src

Indent guides to check indentation
#+begin_src emacs-lisp
(use-package indent-bars
  :ensure t
  :hook (prog-mode . indent-bars-mode)
  :custom
  (indent-bars-prefer-character t)
  (indent-bars-ts-support t)
  (indent-bars-color '(highlight :blend 0.6))
  (indent-bars-highlight-current-depth '(:face default :blend 1.0))
  (indent-bars-treesitter-scope '((python function_definition class_definition for_statement if_statement with_statement while_statement))))
#+end_src

Gotta get those nice looking SVG tags
#+begin_src emacs-lisp
;; TODO resolve why loading causes problems for dasboard and dired-sidebar
(use-package svg-tag-mode
  :ensure t
  :custom
  ;(global-svg-tag-mode t)
  (svg-tag-tags '((":TODO:" . ((lambda (tag)
                                 (svg-tag-make "TODO" :face 'org-tag
                                               :radius 4 :inverse t :margin 0)))))))
#+end_src

#+begin_src emacs-lisp
(use-package hideshow
  :diminish hs-minor-mode
  :hook (prog-mode . hs-minor-mode))
#+end_src
*** Version Control
#+begin_src emacs-lisp
(use-package vc-git
  :config
  ;; I really just need to be able to use ¯\_(ツ)_/¯
  (my/add-fundamental-snippets vc-git-log-edit-mode-abbrev-table))
#+end_src

*** Fireplace
Because why not
#+begin_src emacs-lisp
(use-package fireplace
  :ensure t)
#+end_src

*** Open Streetmap Viewer
Also because why not
#+begin_src emacs-lisp
(use-package osm
  :ensure t)
#+end_src

*** Zone
#+begin_src emacs-lisp
(use-package zone-matrix
  :demand t
  :custom
  (zmx-unicode-mode t)
  :config
  ;; For some reason this will not work in the :custom block ¯\_(ツ)_/¯
  (setq zone-programs [zone-matrix]))
#+end_src

*** PDF-Tools
Improvements over the stock docview
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  (pdf-tools-install nil t))
#+end_src

*** Combobulate
Structed editing in non-lisp languages is quite useful
#+begin_src emacs-lisp
(use-package combobulate)
#+end_src

*** Biome
So I can check the weather for the day in Emacs ;)
#+begin_src emacs-lisp
(use-package biome
  :ensure t
  :config
  (defun my/biome-from-osm ()
    (interactive)
    (add-to-list 'biome-query-coords (cons (read-from-minibuffer "Location Name: ") (seq-subseq osm--pin 0 2)))))
#+end_src

* Direnv
Apparently this is supposed to be the last thing ever hooked to ensure proper functioning
#+begin_src emacs-lisp
(use-package envrc
  :ensure t
  :hook (after-init . envrc-global-mode)
  :config
  (advice-add 'Man-completion-table :around #'envrc-propagate-environment))
#+end_src
# TODO: eat, treesit-utils, go/other prog modes, custom modeline, flymake, dape, golden-ratio, dimmer, gptel, webkit
